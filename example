Middleware,

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const requestHeaders = new Headers(request.headers);
  const url = new URL(request.url);
  const pathSegments = url.pathname.split('/').filter(Boolean);
  const locale = pathSegments[1] || null;

  if (!locale) {
    return NextResponse.next();
  }

  if (locale !== requestHeaders.get('locale')) {
    requestHeaders.set('locale', locale);
  }

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });

  return response;
}


request
import { getRequestConfig } from 'next-intl/server';
import { headers } from 'next/headers';
import { language } from '@/app/[countrycode]/[locale]/login/constants';


export default getRequestConfig(async () => {
  const availableLocales = language.map(lang => lang.value);  
  const defaultLocale = 'de';

  try {
    const headersList = headers();
    const localeFromHeader = headersList.get('locale') || '';
    const locale = availableLocales.includes(localeFromHeader) ? localeFromHeader : defaultLocale;
    const messages = (await import(`../../messages/${locale}.json`)).default;

    return {
      locale,
      messages
    };
  } catch (error) {
    console.error('Error loading locale or messages:', error);
    const fallbackMessages = (await import(`../../messages/${defaultLocale}.json`)).default;

    return {
      locale: defaultLocale,
      messages: fallbackMessages
    };
  }
});
