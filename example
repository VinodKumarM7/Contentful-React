'use client';
import React, { useEffect, useState } from 'react';
import Dropdown from '../Dropdown';
import { useTranslations } from 'next-intl';
import { useParams, usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';

function LoginForm() {
  const pathname = usePathname();
  const t = useTranslations('LoginPage');
  
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [error, setError] = useState('');
  const [isPasswordVisible, setIsPasswordVisible] = useState(false); // State to toggle password visibility
  const params = useParams();
  const { countrycode, locale } = params;
  
  const router = useRouter();

  useEffect(() => {
    router.refresh();
  }, [locale, router]);

  const togglePasswordVisibility = () => {
    setIsPasswordVisible(!isPasswordVisible);
  };

  const validateInputs = () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!username || !emailRegex.test(username)) {
      setError(t('invalidEmail'));
      return false;
    }
    const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\w_]).{8,}$/;
    if (!password) {
      setError(t('invalidPassword'));
      return false;
    }
    if (!strongPasswordRegex.test(password)) {
      setError(t('invalidPassword'));
      return false;
    }
    setError('');
    return true;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    const raw = JSON.stringify({
      username,
      password,
    });

    try {
      const response = await fetch("https://qaxb7v25uojzpzg7lqz5saqicu0wvqfk.lambda-url.eu-central-1.on.aws/login", {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: raw,
      });

      if (response.ok) {
        router.push('dashboard');
      } else {
        setError(t('invalidLogin'));
      }
    } catch (error) {
      console.error('Error in API request', error);
    }
  };

  return (
    <>
      <main className="login-main-custom">
        <div className="max-w-xl w-full mx-5">
          <h1 className="login-main-htag-custom">{t('title')}</h1>

          <form onSubmit={handleSubmit}>
            {error && <div id="error bg-error-bg text-error-text p-6 mb-4" className="error-message">
              <p>{error}</p>
            </div>}

            <div className="mb-10">
              <label htmlFor="username" className="login-main-label-custom">{t('email')}</label>
              <input
                type="email"
                id="username"
                name="username"
                className="log-main-input-cust log-main-input-border text-md"
                aria-label="E-mail address"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                aria-label="E-mail address"
              />
            </div>

            <div className="mb-6 relative">
              <label htmlFor="password" className="login-main-label-custom">{t('password')}</label>
              <input
                type={isPasswordVisible ? 'text' : 'password'}  // Toggle between text and password types
                id="password"
                name="password"
                className="log-main-input-cust log-main-input-border"
                aria-label="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                aria-label="Password"
              />
              <span
                className="absolute right-3 top-3 cursor-pointer"
                onClick={togglePasswordVisibility}
              >
                {isPasswordVisible ? (
                  <i className="fa-regular fa-eye-slash"></i>
                ) : (
                  <i className="fa-regular fa-eye"></i>
                )}
              </span>
            </div>

            <div className="mb-14 login-main-common-custom">
              <label className="flex text-gray-700">
                <input type="checkbox" name="remember" />
                <span className="login-main-remember-span-custom">{t('rmemberme')}</span>
              </label>

              <Link href={`/${countrycode}/${locale}/forgot-password`} className="login-main-forgot-custom">
                {t('forgotpassword')}
              </Link>
            </div>

            <div className="flex items-center justify-center">
              <button type="submit" className="login-main-redbtn-custom">{t('submitbtntext')}</button>
            </div>
          </form>

          <div className="flex items-center justify-center mt-10">
            <Dropdown pagename="login" />
          </div>
        </div>
      </main>
    </>
  );
}

export default LoginForm;
