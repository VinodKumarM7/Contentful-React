import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

const validCountryCodes = ['us', 'de', 'fr']; // Add your valid country codes
const validLocales = ['en', 'de', 'fr']; // Add your valid locales

export function middleware(request: NextRequest) {
  const requestHeaders = new Headers(request.headers);
  const url = new URL(request.url);
  const pathSegments = url.pathname.split('/').filter(Boolean);

  const countryCode = pathSegments[0] || null;
  const locale = pathSegments[1] || null;

  // Check if the countryCode and locale are valid
  if (!validCountryCodes.includes(countryCode) || !validLocales.includes(locale)) {
    return NextResponse.redirect(`${url.origin}/maintenance`);
  }

  if (locale !== requestHeaders.get('locale')) {
    requestHeaders.set('locale', locale);
  }

  return NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });
}




import { getRequestConfig } from 'next-intl/server';
import { headers } from 'next/headers';
import { language } from '@/app/[countrycode]/[locale]/login/constants';

export default getRequestConfig(async () => {
  const availableLocales = language.map(lang => lang.value);

  try {
    const headersList = headers();
    const localeFromHeader = headersList.get('locale') || '';
    const locale = availableLocales.includes(localeFromHeader) ? localeFromHeader : null;

    if (!locale) {
      throw new Error('Invalid locale');
    }

    const messages = (await import(`../../messages/${locale}.json`)).default;

    return {
      locale,
      messages,
    };
  } catch (error) {
    console.error('Error loading locale or messages:', error);
    throw error; // Error handling can be done via middleware redirection
  }
});
