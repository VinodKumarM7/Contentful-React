
"use client"
import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { usePathname } from 'next/navigation';
import { language } from '@/app/[countrycode]/[locale]/login/constants';

function Dropdown({ pagename }: { pagename: string }) {
    const router = useRouter();
    const pathname = usePathname();

    const urlparams = useParams();
    const { countrycode, locale } = urlparams;

    const [currLang, setCurrLang] = useState<string>(locale); // current language
    const [currCountry, setCurrCountry] = useState<string>(countrycode); // current country

    useEffect(() => {
        setCurrLang(locale); // Update language when locale changes
    }, [locale]);

    const changeLanguage = (e: any) => {
        const selectedLang = e.target.value;
        setCurrLang(selectedLang);  // Update state for selected language
        
        // Update URL without changing the country code
        router.push(`/${currCountry}/${selectedLang}/${pagename}`);
    };

    return (
        <div className='mb-4'>
            <select
                style={{ cursor: 'pointer' }} 
                className='ml-auto block w-full/8 px-2 border border-gray-3oo rounded-md focus:outline-none focus:ring-2 focus:ring-rgb(197 40 28 )-500'
                onChange={changeLanguage}
                value={currLang}
            >
                {language.map((language) => (
                    <option
                        key={language.id}
                        style={{ cursor: 'pointer' }}
                        value={language.value}
                    >
                        {language.name}
                    </option>
                ))}
            </select>
        </div>
    );
}

export default Dropdown;


'use client';
import React, { useEffect, useState } from 'react';
import Dropdown from '../Dropdown';
import { useTranslations } from 'next-intl';
import { usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';

function LoginForm() {
    const pathname = usePathname();
    const lang = pathname.split('/')[1]; // Extract only the lang part of the URL
    const t = useTranslations('LoginPage'); // Locale will be handled by next-intl based on the lang in the URL

    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [rememberMe, setRememberMe] = useState(false);
    const [error, setError] = useState('');
    const router = useRouter();

    // Validate Inputs (email and password)
    const validateInputs = () => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (!username || !emailRegex.test(username)) {
          setError(t('invalidEmail')); // Translation based on lang
          return false;
        }

        const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\w_]).{8,}$/;
        if (!password) {
          setError(t('invalidPassword')); // Translation based on lang
          return false;
        }
        if (!strongPasswordRegex.test(password)) {
          setError(t('invalidPassword')); // Translation based on lang
          return false;
        }
        setError('');
        return true;
    };

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
     
        const raw = JSON.stringify({
          username,
          password,
        });
     
        try {
          const response = await fetch("https://qaxb7v25uojzpzg7lqz5saqicu0wvqfk.lambda-url.eu-central-1.on.aws/login", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: raw,
          });
           
          if (response.ok) { 
            router.push('dashboard'); 
          } else {
            setError(t('invalidLogin')); // Show error if login fails, translated text
          }
        } catch (error) {
          console.error('Error in API request', error);
        }
    };
     
  return (
    <>
      <main className="login-main-custom">
        <div className="max-w-xl w-full mx-5">
          <h1 className="login-main-htag-custom">{t('title')}</h1>
          
          <form onSubmit={handleSubmit}>
            {error && <div id="error bg-error-bg  text-error-text p-6 mb-4" className="error-message">
              <p>{error}</p>
            </div>}
                        
            <div className="mb-10">
              <label htmlFor="username" className="login-main-label-custom">{t('email')}</label>
              <input 
                type="email" 
                id="username" 
                name="username"
                className="log-main-input-cust log-main-input-border text-md"
                aria-label="E-mail address" 
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>

            <div className="mb-6">
              <label htmlFor="password" className="login-main-label-custom">{t('password')}</label>
              <input 
                type="password" 
                id="password" 
                name="password"
                className="log-main-input-cust log-main-input-border"
                aria-label="Password" 
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>

            <div className="mb-14 login-main-common-custom">
              <label className="flex text-gray-700">
                <input type="checkbox" name="remember" />
                <span className="login-main-remember-span-custom">{t('rmemberme')}</span>
              </label>
              <Link href={`/${lang}/forgot-password`} className="login-main-forgot-custom">
                {t('forgotpassword')}
              </Link>
            </div>

            <div className="flex items-center justify-center">
              <button type="submit" className="login-main-redbtn-custom">{t('submitbtntext')}</button>
            </div>
          </form>

          <div className='flex items-center justify-center mt-10'>
            <Dropdown pagename='login'></Dropdown>
          </div>
        </div>
      </main>
    </>
  );
}

export default LoginForm;
