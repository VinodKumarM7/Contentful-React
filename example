//Package.json

{
  "name": "vitality_webexp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.7.7",
    "next": "^14.2.13",
    "next-intl": "^3.19.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18.3.8",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10",
    "eslint": "^8",
    "eslint-config-next": "^14.2.13",
    "postcss": "^8",
    "tailwindcss": "^3",
    "typescript": "^5"
  }
}

//next.config.js
const createNextIntlPlugin = require('next-intl/plugin');
 
const withNextIntl = createNextIntlPlugin();
 
/** @type {import('next').NextConfig} */
const nextConfig = {
    //basePath: '/de/de/login'
};
 
module.exports = withNextIntl(nextConfig);

//middleware.ts

import createMiddleware from 'next-intl/middleware';
import {routing} from './i18n/routing';
 
export default createMiddleware(routing);
 
export const config = {
  matcher: ['/', '/(de|en|fr|pl|es|cz)/:path*']
};

//I18n request
import {notFound} from 'next/navigation';
import {getRequestConfig} from 'next-intl/server';
import {routing} from './routing';
 
export default getRequestConfig(async ({locale}) => {
  // Validate that the incoming `locale` parameter is valid
  if (!routing.locales.includes(locale as any)) notFound();
 
  return {
    messages: (await import(`../../messages/${locale}.json`)).default
  };
});

//routing
import {defineRouting} from 'next-intl/routing';
import {createSharedPathnamesNavigation} from 'next-intl/navigation';
 
export const routing = defineRouting({
  locales: ['en', 'de','fr','pl','cz','es'],
  defaultLocale: 'de'
});
 
export const {Link, redirect, usePathname, useRouter} =
  createSharedPathnamesNavigation(routing);

//LoginForm layout


'use client';
import React, { useEffect, useState } from 'react'

import Dropdown from '../Dropdown';
import { useTranslations } from 'next-intl';
import { useParams, usePathname, useRouter } from 'next/navigation';
import path from 'path';
import Link from 'next/link';


function LoginForm() {
    const pathname = usePathname();
    const langlocale = pathname.split('/')[2];
    const t = useTranslations('LoginPage');

    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [rememberMe, setRememberMe] = useState(false)
    const [error, setError] = useState('');
    const params = useParams();
    const {countrycode, locale} = params;

  const router = useRouter();
  //const Navigate = useNavigate();  
    console.log('params', countrycode,locale);

    useEffect(() => {
       router.refresh();
       
  
  
      }, [locale,router]);

      const validateInputs = () => {
        console.log('validation called');
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
        if (!username || !emailRegex.test(username)) {
          setError(t('invalidEmail'));
          return false;
        }
        const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\w_]).{8,}$/;
        if (!password) {
          setError(t('invalidPassword'));
          return false
        }
        if (!strongPasswordRegex.test(password)) {
          setError(t('invalidPassword'));
          return false;
        }
        setError('')
        return true;
      };
    
 
    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
     
        const raw = JSON.stringify({
          username,
          password,
        });
     
        try {
          const response = await fetch("https://qaxb7v25uojzpzg7lqz5saqicu0wvqfk.lambda-url.eu-central-1.on.aws/login", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: raw,
              });
           
              if (response.ok) { 
                router.push('dashboard'); 
              } else {
                //const data = await response.json(); 
                setError (t('invalidLogin'))
              }
            } catch (error) {
              console.error('Error in API request', error);
            }
      };
     
  return (
    <>
        <main className="login-main-custom">
            <div className="max-w-xl w-full mx-5">
            <h1 className="login-main-htag-custom">{t('title')}</h1>
            
            <form onSubmit={handleSubmit}>
                {error && <div id="error bg-error-bg  text-error-text p-6 mb-4" className="error-message">
                <p>{error}</p>
                </div> }
                            
                <div className="mb-10">
                <label htmlFor="username" className="login-main-label-custom">{t('email')}</label>
                <input type="email" id="username" name="username" 
                    className="log-main-input-cust log-main-input-border text-md"
                    aria-label="E-mail address" value={username}
                    onChange={(e) => setUsername(e.target.value)} 
                    // onBlur={validateInputs}
                    // onFocus={() =>setError('')}
                    // onKeyDown={validateInputs}
                    aria-label="E-mail address" />
                </div>
                <div className="mb-6">
                <label htmlFor="password" className="login-main-label-custom">{t('password')}</label>
                <input type="password" id="password" name="password"  
                    className="log-main-input-cust log-main-input-border"
                    aria-label="Password" value={password}
                    onChange={(e) => setPassword(e.target.value)} 
                    // onBlur={validateInputs}
                    // onFocus={() =>setError('')}
                    // onKeyDown={validateInputs}
                    aria-label="Password"/> <span className="-ml-6 absolute" ><i className="fa-regular fa-eye-slash"></i></span>
                    
                </div>
                <div className="mb-14 login-main-common-custom">
                    <label className="flex text-gray-700">
                        <input type="checkbox" name="remember" />
                        <span className="login-main-remember-span-custom">{t('rmemberme')}</span>
                    </label>

                    <Link href={`/${countrycode}/${locale}/forgot-password`} className="login-main-forgot-custom">{t('forgotpassword')}</Link>
                </div>
                <div className="flex items-center justify-center">
                <button type="submit" className="login-main-redbtn-custom">{t('submitbtntext')}</button>
                </div>
            </form>
            <div className='flex items-center justify-center mt-10'>
                <Dropdown pagename='login'></Dropdown>
            </div>
            
            </div>
        </main>
    </>
  )
}

export default LoginForm

//Dropdown.tsx

"use client"
import React, { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { usePathname } from 'next/navigation';
import { language } from '@/app/[countrycode]/[locale]/login/constants';
//import { language } from '@/app/[countrycode]/[locale]/login/constants';


function Dropdown({pagename}:string) {
    //const pagename = params;
    const router = useRouter();
    const pathname = usePathname();
    const defLang = (pathname.split('/')[1]).toUpperCase();
    const defCountry = (pathname.split('/')[0]).toUpperCase();
    const [currLang, setCurrLang] = useState<string>(defLang);
    const [currCountry, setCountry] = useState<string>(defCountry);
    const urlparams = useParams();
    const {countrycode, locale} = urlparams;
    useEffect(() => {
      setCurrLang(locale);
      //setCountry(countrycode);
      }, [urlparams]);
      
    const changeLanguage = (e: any) => {
        const currlocale = e.target.value;
        setCurrLang(currlocale);
        
          router.push(`/${countrycode}/${currlocale}/${pagename}`);
       
       
    };
  return (
    <div className='mb-4'>
        <select style={{cursor:'pointer' }} 
            className='ml-auto block w-full/8 px-2 border border-gray-3oo rounded-md focus:outline-none focus:ring-2 focus:ring-rgb(197 40 28 )-500'
            onChange={changeLanguage}
           value={currLang}
            >
        {language.map((language) => (
            <option  
            key={language.id}
            style={{cursor:'pointer' }}
            value={language.value}
            >
                
                 {language.name}
                
                 
            </option>
          ))}
            
        </select>
    </div>
  )
}

export default Dropdown


//login page.tsx
import React, { useEffect, useState } from 'react'
import {useTranslations} from 'next-intl';
import {Link} from '@/i18n/routing';
import Dropdown from '@/components/Dropdown';
import LoginForm from '@/components/layouts/LoginForm';


function Login() {
    return(
        <LoginForm />
    );
}

export default Login

//constants
export const language = [
    {
      id: 1,
      name: 'DE',
      link: 'de/de/login',
      value: 'de',
      country: 'de',
      lang:'de'
     
    },
    {
      id: 2,
      name: 'FR',
      link: 'fr/fr/login',
      value: 'fr',
      country: 'fr',
      lang:'fr'
    },
    {
      id: 3,
      name: 'PL',
      link: 'pl/pl/login',
      value: 'pl',
      country: 'pl',
      lang:'pl'
    },
    {
      id: 4,
      name: 'ES',
      link: 'es/es/login',
      value: 'es',
      country: 'es',
      lang:'es'
    },
    {
      id: 5,
      name: 'EN',
      link: 'en/en/login',
      value: 'en',
      country: 'en',
      lang:'en'
    },
    {
      id: 6,
      name: 'CZ',
      link: 'cz/cz/login',
      value: 'cz',
      country: 'cz',
      lang:'cz'
    }
  ];

  //layout.tsx
  import type { Metadata } from 'next'
import {NextIntlClientProvider} from 'next-intl';
import {getMessages} from 'next-intl/server';
import './globals.css'
import Header from '@/components/Header';
import Footer from '@/components/Footer';
export const metadata: Metadata = {
  title: 'Generali Vitality - Startseite',
}

export default async function LocaleLayout({
  children,
  params: {locale}
}: {
  children: React.ReactNode;
  params: {locale: string};
}) {
  const messages = await getMessages();
 
  return (
    <html lang={locale}>
      <body className='login-body-custom'>
        <NextIntlClientProvider messages={messages} locale={locale}>
        <Header></Header>
          {children}
          <Footer></Footer>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

page.tsx

import Login from './login/page'

export default function Home() {
 
  return (
    <>
    
      <Login></Login>
     
    </>
  )
}

de.json
{
    "LoginPage": {
      "title": "Login",
      "email": "Email-Adresse",
      "password": "Passwort",
      "rmemberme": "Erinnere dich an mich",
      "forgotpassword":"Passwort vergessen?",
      "submitbtntext": "Login",
      "invalidEmail" : "Bitte geben Sie eine gültige E-Mail-Adresse ein",
      "invalidLogin" : "Falscher Benutzername oder Passwort.",
      "invalidPassword" : "Bitte geben Sie ein gültiges Passwort ein.",
      "pleaseFillFields" : "Please fill in all fields.",
      "redirectMessage" : "Redirecting to home page...."


    },
    "Footer":{
        "downloadapp":"Laden Sie unsere App herunter",
        "followus":"Folgen Sie uns",
        "privacy":{"lable":"Datenschutz", "link":"datenschutz/"},
        "imprint": {"lable":"Impressum","link":"impressum/"},
        "pointsbenefits":{"lable":"Punkte und Vorteile", "link":"punkte-und-vorteile/"},
        "cancelMembership" :{"lable":"Mitgliedschaft kündigen", "link":"mitgliedschaft-kundigen/"},
        "cookiesettings":"Ändern Sie Ihre Cookie-Einstellungen",
        "GmbH":"Generali Engagement Solutions GmbH"
    },
    "ForgotPassword":{
      "forgotHeading" : "Passwort vergessen",
      "forgotFirstHeading" : "Geben Sie Ihre E-Mail-Adresse ein.", 
      "forgotSecondHeading" : "Wir schicken Ihnen an diese Adresse eine E-Mail mit einem Sicherheitscode.",
      "forgotEmail" : "E-Mail",
      "backToLogin" : "Zurück zur Anmeldeseite",
      "forgotError" : "Bitte geben Sie eine gültige E-Mail Adresse ein.",
      "forgotBtnText" : "Sicherheitscode anfordern"

    },
    "Setpassword": {
      "setpasswordHeading" : "Set Password",
      "invalidsecuritycode": "Bitte geben sie den 6 stelligen Code ein.",
      "invalidPassword" : "Bitte geben Sie ein gültiges Passwort ein.",
      "mismatchpassword": "Die Passwörter stimmen nicht überein!"
    }
  }

  en.json
  {
    "LoginPage": {
      "title": "Login",
      "email": "Email Address",
      "password": "Password",
      "rmemberme": "Remember me",
      "forgotpassword":"Forgot your password?",
      "submitbtntext": "Login",
      "invalidEmail" : "Bitte geben Sie eine gültige E-Mail-Adresse ein",
      "invalidPassword" : "Bitte geben Sie eine gültige Email-Adresse ein.",
      "invalidLogin" : "Incorrect username or password.",
      "pleaseFillFields" : "Please fill in all fields.",
      "redirectMessage" : "Redirecting to home page...."
    },
    "Footer":{
        "downloadapp":"Download our app",
        "followus":"Follow us",
        "privacy":{"lable":"Privacy", "link":"datenschutz/"},
        "imprint": {"lable":"Imprint","link":"impressum/"},
        "pointsbenefits":{"lable":"Points and Benefits", "link":"punkte-und-vorteile/"},
        "cancelMembership" :{"lable":"Cancel membership", "link":"mitgliedschaft-kundigen/"},
        "cookiesettings":"Change your cookie settings",
        "GmbH":"Generali Engagement Solutions GmbH"
    },
    "ForgotPassword":{
      "forgotHeading" : "Forgot Password",
      "forgotFirstHeading" : "Enter your email address", 
      "forgotSecondHeading" : "Will you send you an email with a security code to this address",
      "forgotEmail" : "E-mail",
      "backToLogin" : "Back to Login Page",
      "forgotError" : "Please enter a valid email address",
      "forgotBtnText" : "Request Security Code"


    },
    "Setpassword": {
      "setpasswordHeading" : "Set Password",
      "invalidsecuritycode": "Bitte geben sie den 6 stelligen Code ein.",
      "invalidPassword" : "Bitte geben Sie ein gültiges Passwort ein.",
      "mismatchpassword": "Die Passwörter stimmen nicht überein!"
    }
  }

  tsconfig.js
  {
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
