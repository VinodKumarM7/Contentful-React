import { getRequestConfig } from 'next-intl/server';
import { headers } from 'next/headers';
import { languages } from './constants'; // Adjust the import path as necessary
import { notFound } from 'next/navigation'; // Import the notFound function to trigger a 404

export default getRequestConfig(async () => {
  // Extract the locale values from the languages array
  const availableLocales = languages.map(lang => lang.value);

  try {
    // Get the request headers
    const headersList = headers();

    // Extract the 'locale' value from the headers
    const localeFromHeader = headersList.get('locale') || '';

    // If the locale from the header is not valid, trigger a 404 error
    if (!availableLocales.includes(localeFromHeader)) {
      notFound(); // This triggers a 404 error if the locale is not found
    }

    // Dynamically import the appropriate locale messages file
    const messages = (await import(`../../messages/${localeFromHeader}.json`)).default;

    return {
      locale: localeFromHeader,
      messages,
    };
  } catch (error) {
    console.error('Error loading locale or messages:', error);

    // In case of error, also trigger a 404 to prevent falling back
    notFound();
  }
});

asdf

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { languages } from './constants';
import { notFound } from 'next/navigation'; // Import the notFound function to trigger 404

export function middleware(request: NextRequest) {
  // Create a new instance of Headers to modify the request's headers
  const requestHeaders = new Headers(request.headers);
  const url = new URL(request.url);

  // Extract the second segment of the URL path, which corresponds to the locale
  const pathSegments = url.pathname.split('/').filter(Boolean);

  // Check if a second path segment exists (which would be the locale, e.g., '/en')
  const locale = pathSegments[1] || null;

  // Extract valid locales from constants
  const availableLocales = languages.map(lang => lang.value);

  // If no locale is found or the locale is not in the valid list, trigger a 404
  if (!locale || !availableLocales.includes(locale)) {
    notFound(); // Trigger 404 if the locale is invalid or missing
  }

  // Set the 'locale' header if it's valid
  requestHeaders.set('locale', locale);

  // Create a response and pass the modified headers
  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });

  return response;
}
